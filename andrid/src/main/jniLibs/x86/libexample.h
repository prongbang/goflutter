/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 13 "bridge.gen.go"

#include <stdlib.h>
#include <stdint.h>

typedef struct {
	int x;
	int y;
	void* name;
} fgb_vt_point;

typedef struct {
	int res;
	void* err;
} fgb_ret_add;

typedef struct {
	fgb_vt_point res;
	void* err;
} fgb_ret_add_points;

typedef struct {
	int res;
	void* err;
} fgb_ret_add_error;

typedef struct {
	uintptr_t res;
	void* err;
} fgb_ret_new_obj;

typedef struct {
	void* err;
} fgb_ret_modify_obj;

typedef struct {
	void* res;
	void* err;
} fgb_ret_format_obj;

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt32 GoInt;
typedef GoUint32 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_32_bit_pointer_matching_GoInt[sizeof(void*)==32/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern fgb_vt_point fgbempty_point();
extern fgb_ret_add fgb_add(int arg_a, int arg_b);
extern void fgbasync_add(int arg_a, int arg_b, GoInt64 fgbPort);
extern fgb_ret_add fgbasyncres_add(GoUint64 h);
extern fgb_ret_add_points fgb_add_points(fgb_vt_point arg_a, fgb_vt_point arg_b);
extern void fgbasync_add_points(fgb_vt_point arg_a, fgb_vt_point arg_b, GoInt64 fgbPort);
extern fgb_ret_add_points fgbasyncres_add_points(GoUint64 h);
extern fgb_ret_add_error fgb_add_error(int arg_a, int arg_b);
extern void fgbasync_add_error(int arg_a, int arg_b, GoInt64 fgbPort);
extern fgb_ret_add_error fgbasyncres_add_error(GoUint64 h);
extern fgb_ret_new_obj fgb_new_obj(void* arg_name, int arg_other);
extern void fgbasync_new_obj(void* arg_name, int arg_other, GoInt64 fgbPort);
extern fgb_ret_new_obj fgbasyncres_new_obj(GoUint64 h);
extern fgb_ret_modify_obj fgb_modify_obj(uintptr_t arg_o);
extern void fgbasync_modify_obj(uintptr_t arg_o, GoInt64 fgbPort);
extern fgb_ret_modify_obj fgbasyncres_modify_obj(GoUint64 h);
extern fgb_ret_format_obj fgb_format_obj(uintptr_t arg_o);
extern void fgbasync_format_obj(uintptr_t arg_o, GoInt64 fgbPort);
extern fgb_ret_format_obj fgbasyncres_format_obj(GoUint64 h);

#ifdef __cplusplus
}
#endif
